{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\fswiss\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\froman\fprq2\fcharset0 Georgia;}{\f6\fnil\fprq2\fcharset0 Noto Sans CJK SC Regular;}{\f7\fnil\fprq2\fcharset0 FreeSans;}{\f8\fswiss\fprq0\fcharset128 FreeSans;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet{\s0\snext0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033 Normal;}
{\s15\sbasedon0\snext16\sb240\sa120\keepn\dbch\af6\dbch\af7\afs28\loch\f4\fs28 Heading;}
{\s16\sbasedon0\snext16\sl288\slmult1\sb0\sa140 Text Body;}
{\s17\sbasedon16\snext17\sl288\slmult1\sb0\sa140\dbch\af8 List;}
{\s18\sbasedon0\snext18\sb120\sa120\noline\i\dbch\af8\afs24\ai\fs24 Caption;}
{\s19\sbasedon0\snext19\noline\dbch\af8 Index;}
}{\*\generator LibreOffice/5.1.6.2$Linux_X86_64 LibreOffice_project/10m0$Build-2}{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr2017\mo9\dy28\hr9\min44}{\printim\yr0\mo0\dy0\hr0\min0}}\deftab720
\viewscale180
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\pgdscnxt0 Default Style;}}
\formshade{\*\pgdscno0}\paperh15840\paperw12240\margl1800\margr1800\margt1440\margb1440\sectd\sbknone\sectunlocked1\pgndec\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep}\pgndec\pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b\rtlch \ltrch\loch\fs32\lang1033\loch\f5
List of Files for this assignment:}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
ex3.m - Octave/MATLAB script that steps you through section 1}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
ex3 nn.m - Octave/MATLAB script that steps you through section 2}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
ex3data1.mat - Training set of hand-written digits}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
ex3weights.mat - Initial weights for the neural network exercise}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
submit.m - Submission script that sends your solutions to our servers}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
displayData.m - Function to help visualize the dataset}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
fmincg.m - Function minimization routine (similar to fminunc)}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
sigmoid.m - Sigmoid function}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
[?] lrCostFunction.m - Logistic regression cost function}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
[?] oneVsAll.m - Train a one-vs-all multi-class classifier}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
[?] predictOneVsAll.m - Predict using a one-vs-all multi-class classifier}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
[?] predict.m - Neural network prediction function}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5

\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs40\lang1033\loch\f5
Section 1: Logistic regression}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033\cf1\b0\rtlch \ltrch\loch\fs29\lang1033\loch\f5

\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033\nowidctlpar\hyphpar0{\cf1\b0\afs24\rtlch \ltrch\loch\fs24\lang1033\loch\f5
In this part, you will implement some code for performing training with }{\cf1\b0\afs24\rtlch \ltrch\loch\fs24\lang1033\loch\f5
multi-class }{\cf1\b0\afs24\rtlch \ltrch\loch\fs24\lang1033\loch\f5
logistic regression }{\cf1\b0\afs24\rtlch \ltrch\loch\fs24\lang1033\loch\f5
using one-vs-all algorithm}{\cf1\b0\afs24\rtlch \ltrch\loch\fs24\lang1033\loch\f5
.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033\nowidctlpar\hyphpar0\cf1\b0\rtlch \ltrch\loch\fs29\lang1033\loch\f5

\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs32\lang1033\loch\f5
Part 1: Loading and Visualizing Data}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
We start the exercise by first loading and visualizing the dataset. You will be working with a dataset that contains handwritten digits. The code for doing this has already been written down for you.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5

\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs32\lang1033\loch\f5
Part 2: Vectorize Logistic Regression}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
In this part of the exercise, you will reuse your logistic regression code from the last exercise. You task here is to make sure that your regularized logistic regression implementation is vectorized. After that, you will implement one-vs-all classification for the handwritten digit dataset. lrCostFunction.m, oneVsAll.m, and predictOneVsAll.m are the files that you need to fill in.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5

\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs40\lang1033\loch\f5
Section 2: Neural Network}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
In this part of the exercise, you will implement a neural network to recognize handwritten digits using the same training set as before. The provided script, ex3_nn.m, will help you step through this exercise. You will be using parameters from a neural network that we have already trained. Your goal is to implement the feedforward propagation algorithm to use our weights for prediction. You should do this in predict.m}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5

\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
Once you are done, ex3 nn.m will call your predict function using the}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033{\cf1\b0\rtlch \ltrch\loch\fs24\lang1033\loch\f5
loaded set of parameters for Theta1 and Theta2. You should see that the accuracy is about 97.5%. After that, an interactive sequence will launch displaying images from the training set one at a time, while the console prints out the predicted label for the displayed image. To stop the image sequence, press Ctrl-C.}
\par }